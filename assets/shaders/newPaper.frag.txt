// Buffer A

// Simplex 2D noise
//
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float ridgenoise(vec2 v) {
  return 2.0 * (0.5 - abs(snoise(v)));
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
	
    float endNoise = 1.0f;
    float noiseOffset = 1.0f;
    
    float offset = (snoise(fragCoord/10.0)+1.0)/2.0;
    
    float e = 1.0f;
    float e2 = 1.0f;
    
    float thing2 = snoise(vec2(fragCoord.y, fragCoord.x) / 1e2);
    
    for(float i = 1.0; i < 6.0; ++i)
    {
        float thing = float(1 << int(i));
        e = 1.0/i * ridgenoise((vec2(fragCoord.x + 100.0-fragCoord.y, fragCoord.y+fragCoord.x) * (5.0-i))/3200.0 / i * thing) * endNoise;
        e = -e;
        endNoise += e;
        
        e2 = 1.0/i * ridgenoise((vec2(fragCoord.x + 100.0-fragCoord.y, fragCoord.y+fragCoord.x) * (5.0-i))/3200.0 / i* thing - vec2(0.01, 0.01)) 
            * noiseOffset;
        e2 = -e2;
        noiseOffset += e2;
        /*int samplePeriod = 1 << (i);
        float sampleFrequency = 1.0f / float(samplePeriod);
        endNoise += ridgenoise(fragCoord / 400.0 * float(samplePeriod)) * sampleFrequency;
        noiseOffset+= snoise(fragCoord / 200.0 * float(samplePeriod) + vec2(0.05, 0.05)) * sampleFrequency;
	*/    
	}
    endNoise -= 1.0f;
    noiseOffset -= 1.0f;
    
    endNoise = pow(endNoise, 1.0);
    noiseOffset = pow(noiseOffset, 1.0);
    
    
    endNoise = ((noiseOffset-endNoise));
    
    //endNoise = abs(endNoise) * -1.0 + 1.0;
	//noiseOffset = abs(noiseOffset) * -1.0 + 1.0;

    
    
    /*float endNoise = abs(snoise((fragCoord + iTime*32.0) / 300.0)) * -1.0 + 1.0;
    float endNoise2 = abs(snoise((fragCoord + iTime*32.0 + vec2(8,0)) / 300.0)) * -1.0 + 1.0;
    
    endNoise = 1.0 - (endNoise2/2.0 - endNoise/2.0);
    */
    // Output to screen
    fragColor = vec4(endNoise*0.95, endNoise*0.95, endNoise,1.0);
}





// Main Shader


// Simplex 2D noise
//
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
    vec2 texel = 1. / iResolution.xy;
    vec2 uv = fragCoord.xy / iResolution.xy;
    
    float noiseX = 1.0;
    float noiseY = 1.0;
    float noise = 1.0;
    
    for(float i = 1.0; i < 4.0; ++i)
    {
        float thing = float(1<<int(i));
        noiseX += 1.0/i * snoise(fragCoord/200.0 * thing);
        noiseY += 1.0/i * snoise((fragCoord + 1000.0)/200.0 * thing);
    }
    
    noiseX /= 2.0;
    noiseY /= 2.0;
    
    
    float x = noiseX;
    float y =  noiseY;
    vec4 texCol = clamp(texture(iChannel0, uv + vec2(x/iResolution.x * 6.0, y/iResolution.y * 6.0)), 
                      vec4(0,0,0,0), vec4(1,1,1,1)) ;
    
    
    for(float i = 1.0; i < 4.0; ++i)
    {
        float thing = float(1<<int(i));
        noise += 1.0/i * snoise(fragCoord /4.0 * thing + texCol.xy);
    }
    noise = (noise + 1.0) / 4.0;
        float noise3 = snoise(uv * 800.0 * texCol.xy) - ((snoise(uv * 50.0) + 1.0) / 2.0) - ((snoise(uv * 20.0) + 1.0) / 2.0);
    noise3 = clamp(noise3, 0.0, 0.05);
    fragColor = vec4(0.98, 0.98, 0.98, 1.0) / (1.0-texCol*0.4) * (1.0 - noise*0.15) - noise3*0.7;
    
    //ragColor = texture(iChannel1, uv);
}
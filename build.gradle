plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply intallij plugin
    id 'idea'

    // Apply the application plugin to add support for building an application
    id 'application'
}

// Define the main class for the application
mainClassName = 'com.syntax_highlighters.java.Main'

test.outputs.upToDateWhen {false}

ext {
    gdxVersion = "1.9.8"
}

sourceSets {
    main {
        resources {
            srcDirs = ['assets']
        }
    }
}

configurations {
    // configuration that holds jars to copy into lib
    extraLibs
}

dependencies {
    
    // Use JUnit test framework
    testCompile 'junit:junit:4.12' 

    testImplementation(
        'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:5.1.0',
        'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
    
    //Defines dependencies for the :core project, in this example the gdx dependency
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    //Defines dependencies for the :core project, in this example the gdx dependency
    extraLibs "com.badlogicgames.gdx:gdx:$gdxVersion"
    extraLibs "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    extraLibs "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Main-Class': 'com.syntax_highlighters.java.Main')
    }
}

javadoc {
    destinationDir = new File('./docs/api/')
}

task fatjar(group: 'Build', description:'Assembles a "fat jar" containing all the libraries and the main classes', type: Jar) {    
    manifest {
        attributes 'Main-Class': 'com.syntax_highlighters.java.Main'
    }
    baseName = 'DoodleChess-fat'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply intallij plugin
    id 'idea'

    // Apply the application plugin to add support for building an application
    id 'application'

    // Gradle pretty test (https://github.com/radarsh/gradle-test-logger-plugin)
    id 'com.adarshr.test-logger' version '1.2.0'
}

// Define the main class for the application
mainClassName = 'com.syntax_highlighters.chess.Main'

// Current logger type used by the gradle-test-logger
testlogger {
    theme 'mocha'
}

// Remember to add the assets when building
sourceSets {
    main {
        resources {
            srcDirs = ['assets']
        }
    }
}

configurations {
    // configuration that holds jars to copy into lib
    extraLibs
}

ext {
    // Selected libGDX version
    gdxVersion = "1.9.8"
}

dependencies {
    
    testImplementation(
        'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:5.1.0',
    )
    
    //Defines dependencies for LibGdx
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    compile 'org.xerial:sqlite-jdbc:3.7.2'

    //Defines dependencies for LibGdx, used in the fat-jar
    extraLibs "com.badlogicgames.gdx:gdx:$gdxVersion"
    extraLibs "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    extraLibs "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    extraLibs "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    extraLibs "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    extraLibs 'org.xerial:sqlite-jdbc:3.7.2'
}

// Use gradle built in JUnit test platform
test {
    useJUnitPlatform()
    
    exclude '**/speedtest/**'
}

repositories {
    // Use jcenter for resolving dependencies.
    jcenter()

}

// Change destination of javadoc output
javadoc {
    destinationDir = new File('./docs/api/')
}

task testAll(group: 'Verification', description: 'Performs all unit tests including ai speed tests', type: Test) {
    useJUnitPlatform()
}

task testAllFailFast(group: 'Verification', description: 'Performs all unit tests including ai speed tests', type: Test) {
    useJUnitPlatform()
    failFast true
}

// Custom task to create a "fat-jar"
task fatjar(group: 'Build', description:'Assembles a "fat jar" containing all the libraries and the main classes', type: Jar) {    
    manifest {
        attributes 'Main-Class': 'com.syntax_highlighters.chess.Main'
    }
    dependsOn testAllFailFast
    destinationDir = new File("./build/distributions")
    baseName = 'DoodleChess-fat'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

build {
    dependsOn 'clean'
    dependsOn testAllFailFast
}
